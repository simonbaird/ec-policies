= Policy Configuration

:numbered:

It's possible to configure which rules should be included and which should be
skipped when the Enterprise Contract check runs. The way this is configured
is using fields in the policy configuration as described here.

Note that it's expected that the policy configuration will be created
automatically by the Enterprise Contract Task, based on data from the
applicable Enterprise Contract Policy CRD, so it's likely you won't need to
create or manage this configuration manually.

The Enterprise Contract Task and the Enterprise Contract Policy CRD are
documented elsewhere. _TODO: Where?_

== Configuration Source

When the Enterprise Contract runs it will look for policy configuration in
`data.config.policy`. The easiest way to populate that data is by adding a JSON
formatted file in the `data` directory such as `data/config.json`.

Here's an example of how that file might look.

[source,json]
----
{
  "config": {
    "policy": {
      "include": ["*"],
      "exclude": [],
      "collections": []
    }
  }
}
----

If the policy is not defined, sensible defaults will be used. In fact the above
example shows what the defaults are if the configuration is not specified.

== Including and excluding rules

By default, all rules are included.

You can modify the defaults by setting `config.policy.include` and
`config.policy.exclude`. Each of those values should be a list of
strings.

The strings in the list should be one of the the following:

A "package name"::

Package names can be found in the policy documentation, for example the
xref::release_policy.adoc#attestation_type_package[Attestation Type] package
name is `attestation_type`. Specifing a package name by itself in the include
or exclude list means every rule from that package should be included or
excluded.

A "rule name"::

A rule name consists of the rule's package name and the rule's "code" separated
by a dot. Rule codes can be see in the documentation also. For example the
xref::release_policy.adoc#unknown_att_type[Unknown attestation type found] rule
name is `attestation_type.unknown_att_type`.

"*"::

The `"\*"` acts as a wildcard to match any package. Note that it does not match
partial names, so you can't specify `"s*"` to match every package starting with
"s" for example.

You can also specify `"<packagename>.*"` and it works the same as just
`"<packagename>"` to represent every rule in a package.

== Specifying that individual tests are non-blocking

Distinct from skipping rules, there is a way to indicate that particular tests
are not strictly required by the Enterprise Contract.

This is handled as a special case for the
xref:release_policy.adoc#test_result_failures["test.test_result_failures" rule]
only.

The syntax for skipping a particular test is `"test:<testname>"` and it only
works with the exclude field. You can't use it with the `include`
option.


== Examples

The examples here are shown as the contents of `config.policy` formatted as
YAML for brevity and readability.

Note that you can omit fields where the default value is what you need.

=== Excluding rules from particular packages

This would include all rules except for rules from the two specified packages.
All other rules would be included.

[source,yaml]
----
exclude:
- attestation_task_bundle
- slsa_build_scripted_build
----

=== Including only rules from a particular package

This would include just the rules from the specified packages and exclude all
other rules.

[source,yaml]
----
include:
- test
- java
----

=== Excluding just one rule

This would include all rules except for the `unacceptable_task_bundle` rule in
the `attestation_task_bundle` package. The other rules in the
`attestation_task_bundle` would be included.

[source,yaml]
----
exclude:
- attestation_task_bundle.unacceptable_task_bundle
----

=== Specifying that certain tests should be non-blocking

This example shows how to specify that the Enterprise Contract is allowed to
pass even if certain tests failed or didn't complete.

[source,yaml]
----
exclude:
- test:get-clair-scan
- test:clamav-scan
----

=== Including only some rules from a package

You can specify both `include` and `exclude` to pick out just the
rules you want.

This example specifies that only the `unacceptable_task_bundle` rule from the
`attestation_task_bundle` package should be included. The other rules in the
`attestation_task_bundle` would be excluded.

Notice the higher specificity include rule takes precedence over the exclude
rule in this example.

[source,yaml]
----
include:
- "*"
- attestation_task_bundle.unacceptable_task_bundle
exclude:
- attestation_task_bundle.*
----

== Specifying a predefined set of rules with `collections`

Rather than specifying the values of `include` and `exclude`
explicitly, you can also select from a set of predefined configurations by
setting `"data.config.policy.collections"`. For example, in a `data/config.json`
file:

[source,json]
----
{
  "config": {
    "policy": {
      "collections": ["some_things", "some_other_things"]
    }
  }
}
----

The predefined collections are:

[cols="2,6"]
|===
|*Name*
|*Description*

| `minimal`
| Includes a minimal set of policy rules to ensure the build pipeline is
functioning as expected, and able to produce signed attestations of the
expected type.

| `slsa_1`
| Includes policy rules required to meet SLSA Level 1.

| `slsa_2`
| Includes policy rules required to meet SLSA Level 2. Special attention must
be given to two requirements which are not covered by the policy rules in this
collection. The first is "Provenance - Authenticated" which is expected to be
performed when fetching the attestation via cosign or ec-cli. The second
requirement is "Provenace - Service Generated" which is a little more complex
to verify. By meeting both the "Provenance - Authenticated" AND "Build - Build
Service" requirements, we can have some confidence that this requirement is met
since Chains is a service that generates signed attestations with data obtained
from the build service (Tekton Pipelines).

| `slsa_3`
| Includes policy rules required to meet SLSA Level 3. This is currently a
work in progress and functionally the same as the slsa2 collection.

|===

Policy rules may specify a `custom.collections` metadata attribute as a list of
strings. Each string represents a collection the policy rule is included in.

== The `non_blocking_checks` field

The `non_blocking_checks` configuration option, previously used to skip rules
is now deprecated. It's functionality is replaced with the new `exclude`
option as described above. While it's deprecated it can still be used
interchangeably with the `exclude` field.

Please make the required tooling changes soon to prevent breakages when the
`non_blocking_checks` field is removed in the future.

== Data Sources

Some of the Enterprise Contract policy rules, defined in the ec-policies git
repository, rely on certain data values when evaluated. For example, a policy
rule exists to ensure all the parent container images used during the build
process have been retrieved from an acceptable registry. The list of acceptable
registries is a data value. This type of data is called Rule Data.

In addition to policy rules, the ec-policies git repository also defines values
for Rule Data, see
xref:attachment$rule_data.yml[rule_data.yml]
. As a user, you can provide a custom data source with modified Rule Data
allowing the same policy rules to be used to best fit your use cases.

There are different ways to create a custom data source. The simplest form is to
fork the ec-policies git repository and change the values of
`data/rule_data.yml` in your fork. Then, simply provide your fork as a data
source. For example:

[source,json]
----
{
  "sources": [
    {
      "policy": [
        "git::https://github.com/hacbs-contract/ec-policies.git//policy"
      ],
      "data": [
        "git::https://github.com/lcarva/ec-policies.git//data"
      ]
    }
  ]
}
----

It is also possible to provide an link:https://www.conftest.dev/sharing/[OPA bundle]
as a data source, for example:

[source,json]
----
{
  "sources": [
    {
      "policy": [
        "git::https://github.com/hacbs-contract/ec-policies.git//policy"
      ],
      "data": [
        "oci::quay.io/lucarval/policy-data:latest"
      ]
    }
  ]
}
----

NOTE: If the data source contains policy rules, those will be ignored.

NOTE: If you replace the default data source entirely, you must provide the full set of required data values.
These are all the values defined in
xref:attachment$rule_data.yml[data/rule_data.yml] and xref:attachment$acceptable_tekton_bundles.yml[data/acceptable_tekton_bundles.yml].

NOTE: It's also possible to add an additional data source containing rule data
defined under the `rule_data_custom` top level key. Data under this key will
take precedence over data defined under the `rule_data` top level key. So, for
example you could use the default data source and still define your own values
for `allowed_registry_prefixes` by adding a second data source that includes
a file such as:

[source,yaml]
----
rule_data_custom:
  allowed_registry_prefixes:
    - trusted-registry.io/trusted-images/
    - docker.io/acme-company/
----
